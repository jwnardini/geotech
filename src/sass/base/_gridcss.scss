/**
 * @file
 * A grid solution using grid display.
 *
 * Define variables and mixins to generate a grid.
 *
 */

// Grid parent settings.
//
// $grid-type: grid-template-columns, grid-template-rows, grid-template-areas or grid-template
// $args: a set of arguments to set the structure of the grid type
// $row-gap: Vertical space between rows.
// $column-gap: Horizontal space between columns.
// $flow: row, column or dense.
@mixin gridcss($grid-type, $args, $row-gap: $grid-row-gap, $column-gap: $grid-column-gap, $flow: null) {
  display: grid;
  #{$grid-type}: #{$args};
  grid-column-gap: $column-gap;
  grid-row-gap: $row-gap;
  grid-auto-flow: #{$flow};
}

// Change the column width of an item.
//
// $columns: How many columns you want the item to span.
// $rows: How many rows you want the item to span.
@mixin gridcss-item-span($columns: null, $rows: null) {
  grid-column-end: span $columns;
  grid-row-end: span $rows;
}

// Example: enlarge grid item using gridcss-item-span().
.example-larger {
  @include gridcss-item-span(2, 3);
}

// Explicitly place an grid item.
//
// $columns: Which column to place.
// $rows: Which row to place.
@mixin gridcss-item-placement($column: null, $row: null) {
  grid-row: #{$row};
  grid-column: #{$column};
}

// Example: reposition and enlarge grid item using gridcss-item-placement().
.example-position {
  @include gridcss-item-placement(1, '1/3');
  background-color: $highlight !important;
}

// Style a uniform grid.
//
// $number: Number of columns for grid
// $row-gap: Vertical space between rows.
// $column-gap: Horizontal space between columns.
// $flow: row, column or dense.
@mixin tm-gridcss($number, $row-gap: $grid-row-gap, $column-gap: $grid-column-gap, $flow:null) {
  @include gridcss('grid-template-columns', repeat($number, 1fr), $row-gap, $column-gap, $flow);
  > * > * {
    @include trim();
  }
}

// Example: create a uniform grid using tm-gridcss().
.four-column-gridcss {
  @include tm-gridcss(4, $flow: dense);
  > * {
    background: #eee;
  }
}
