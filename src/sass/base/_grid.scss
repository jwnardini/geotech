/* TRESTLE GRID SYSTEM
********************************/
$grid-columns: 16;
$gutter-width: 60px;
$float-default: left;

@mixin col($span: 1, $grid: $grid-columns, $gutter: $gutter-width, $offset: 0, $float: $float-default) {
  @if $float != none {
    float: $float;
  }
  width: decimal-round($span/$grid*100%, 3);
  @if $offset != 0 {
    margin-left: decimal-round(($offset/$grid)*100%, 3);
  }
  @if $gutter > 0 {
    padding-left: $gutter/2;
    padding-right: $gutter/2;
  }
}

@mixin offset($offset: 1, $grid: $grid-columns) {
  margin-left: ($offset/$grid)*100%;
}

@mixin changecol($original_columns, $add_columns_left, $add_columns_right) {
  margin-left: decimal-round(-((100%/$original_columns)*$add_columns_left), 3);
  margin-right: decimal-round(-((100%/$original_columns)*$add_columns_right), 3);
  width: auto;
  position: relative;
}

//Preferred version of clearfix
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.clearfix {
  @include clearfix;
}

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@mixin generate-grid-span($grid: $grid-columns) {
  @for $i from 1 through $grid {
    .span-#{$i} {
      @include col($i, $grid);
      @for $k from 1 through $grid {
        &.offset-#{$k} {
          @include offset($k, $grid);
        }
      }
    }
  }
}


//@TODO MAKE USE OF INTERPOLATION TO WRITE IN STYLES FOR CLASSES BASED ON VALUES FROM THE CLASS NAME

/* COLUMNS
********************************/
.column-wrapper {
  @include breakpoint($desktop) {
    margin-top: 1.5em;
    margin-bottom: 1.5em;
    &.edge-align {
      margin-left: -$gutter-width/2;
      margin-right: -$gutter-width/2;
    }
    &.four {
      @include clearfix();
      .column {
        @include col(1, 4);
        > * {
          @include trim();
        }
        &.span-2 {
          @include col(2, 4);
        }
        &.span-3 {
          @include col(3, 4);
        }
      }
    }
    &.three {
      @include clearfix();
      .column {
        @include col(1, 3);
        > * {
          @include trim();
        }
        &.span-2 {
          @include col(2, 3);
        }
      }
    }
    &.two {
      @include clearfix();
      .column {
        @include col(1, 2);
        > * {
          @include trim();
        }
      }
    }
  }
  @include breakpoint($mobile) {
    .column {
      margin: 1.5em 0;
    }
  }
}

@include breakpoint($desktop) {
  &.twelve {
    @include generate-grid-span(12);
  }
}

/* GRID
********************************/
@mixin tm-grid($number, $gutter: $gutter-width) {
  @include clearfix();
  position: relative;
  @if $gutter != 0 {
    margin: -($gutter/2);
  }
  > .column {
    @include col(1, $number, $gutter);
    padding: $gutter/2;
    > * {
      @include trim();
    }
    &:nth-child(#{$number}n+1) {
      clear: left;
    }
  }
}

@include breakpoint($desktop) {
  .two-column-grid {
    @include tm-grid(2);
  }
  .three-column-grid {
    @include tm-grid(3);
  }
  .four-column-grid {
    @include tm-grid(4);
  }
}

@include breakpoint($tablet-only) {
  .two-column-grid,
  .three-column-grid,
  .four-column-grid {
    @include tm-grid(2);
  }
}

/* CENTERING OFFSET
********************************/
.center-10 {
  @include col(10, 12, 0, 1, none);
}
.center-8 {
  @include col(8, 12, 0, 2, none);
}
.center-6 {
  @include col(6, 12, 0, 3, none);
}
.center-4 {
  @include col(4, 12, 0, 4, none);
}